rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    function isAuth() {
      return request.auth != null;
    }

    match /users/{userId} {
      allow create; 
      allow read: if isAuth();
      allow update: if isAuth() && request.auth.uid == userId;
    }

    match /friendRequests/{requestId} {
      allow read: if isAuth() && (request.auth.uid == resource.data.to || request.auth.uid == resource.data.from.id);
      allow create: if isAuth() && request.auth.uid == request.resource.data.from.id;
      allow update: if isAuth() && request.auth.uid == resource.data.to;
    }

    match /chats/{chatId} {
      allow read, update, delete: if isAuth() && request.auth.uid in resource.data.members;
      allow create: if isAuth() && request.auth.uid in request.resource.data.members;
      
      match /messages/{messageId} {
        allow read, create, update, delete: if isAuth() && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.members;
      }
    }

    match /servers/{serverId} {
      allow get: if isAuth();
      allow list: if isAuth() && resource.data.isPublic == true;
      allow create: if isAuth();
      allow update, delete: if isAuth() && request.auth.uid == resource.data.ownerId;

      match /channels/{channelId} {
         allow get, list: if isAuth();
         allow create, update, delete: if isAuth() && request.auth.uid == get(/databases/$(database)/documents/servers/$(serverId)).data.ownerId;

        match /messages/{messageId} {
          allow read, create, update, delete: if isAuth() && request.auth.uid in get(/databases/$(database)/documents/servers/$(serverId)).data.members;
        }
      }
    }
  }
}