rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isUser(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    // =================================================================
    // Users Collection
    // =================================================================
    match /users/{userId} {
      // Anyone can create their own user profile document during signup
      allow create: if isUser(userId);
      
      // Any authenticated user can read public user profiles
      allow read: if isSignedIn();
      
      // Only the user themselves can update their profile
      allow update: if isUser(userId);
      
      // Users cannot be deleted from the app
      allow delete: if false;
    }

    // =================================================================
    // Friend Requests Collection
    // =================================================================
    match /friendRequests/{requestId} {
        // A user can create a request if they are the "from" user
        allow create: if isSignedIn() && request.resource.data.from.id == request.auth.uid;
        
        // A user can read a request if they are a member of it (sender or receiver)
        allow read: if isSignedIn() && request.auth.uid in resource.data.members;

        // The recipient of the request can update its status (e.g., to "accepted" or "declined")
        allow update: if isSignedIn() && request.auth.uid == resource.data.to;
        
        allow delete: if false;
    }
    
    // =================================================================
    // Chats (Direct Messages)
    // =================================================================
    match /chats/{chatId} {
      function isMember() {
        return isSignedIn() && request.auth.uid in resource.data.members;
      }

      // Allow read/write access to the chat document only to its members
      allow read, update, delete: if isMember();
      allow create: if isSignedIn() && request.auth.uid in request.resource.data.members;

      // Messages subcollection
      match /messages/{messageId} {
        // Allow members to read and create messages
        allow read, create: if isMember();
        
        // Only the sender can edit or delete their own message
        allow update, delete: if isMember() && resource.data.sender == request.auth.uid;
      }
    }
    
    // =================================================================
    // Servers
    // =================================================================
    match /servers/{serverId} {
       function isServerOwner() {
         return isUser(resource.data.ownerId);
       }
       
       function isServerMember() {
         return isSignedIn() && request.auth.uid in resource.data.members;
       }

      // Any authenticated user can read server info (for discovery/joining)
      allow read: if isSignedIn();
      
      // Any authenticated user can create a server
      allow create: if isSignedIn();
      
      // Users can join a server (update the members array)
      // Owners can update any part of the server
      allow update: if (isServerMember() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['members'])) || isServerOwner();
      
      // Only the owner can delete the server
      allow delete: if isServerOwner();

      // Channels subcollection
      match /channels/{channelId} {
        // Members can read channels
        allow read: if isServerMember();
        
        // Only the owner can create, update, or delete channels
        allow create, update, delete: if isServerOwner();

        // Messages subcollection within channels
        match /messages/{messageId} {
          // Members can read and create messages
          allow read, create: if isServerMember();
          
          // Only the sender can edit or delete their own message
          allow update, delete: if isServerMember() && resource.data.sender == request.auth.uid;
        }
      }
    }
  }
}
