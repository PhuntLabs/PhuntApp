rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // =====================================================================
    // Users Collection
    // =====================================================================
    match /users/{userId} {
      // READ: Any authenticated user can read public user profiles.
      allow read: if request.auth != null;
      
      // CREATE: A user can only create their own user document.
      allow create: if request.auth.uid == userId;
      
      // UPDATE: A user can only update their own user document.
      allow update: if request.auth.uid == userId;
      
      // DELETE: Not allowed.
      allow delete: if false;
    }
    
    // =====================================================================
    // Friend Requests Collection
    // =====================================================================
    match /friendRequests/{requestId} {
      // READ: Users can only read requests where they are the sender or receiver.
      allow read: if request.auth != null && request.auth.uid in resource.data.members;

      // CREATE: Any authenticated user can create a friend request.
      allow create: if request.auth != null;

      // UPDATE: The recipient of the request can update its status (accept/decline).
      allow update: if request.auth != null && request.auth.uid == resource.data.to;
      
      // DELETE: Not allowed.
      allow delete: if false;
    }

    // =====================================================================
    // Chats Collection
    // =====================================================================
    match /chats/{chatId} {
      // READ, WRITE: Users can only access chats they are members of.
      allow read, write: if request.auth.uid in resource.data.members;
      
      // CREATE: Must be a member to create a chat.
      allow create: if request.auth.uid in request.resource.data.members;
      
      // DELETE: Users can delete chats they are members of.
      allow delete: if request.auth.uid in resource.data.members;

      // Messages Sub-collection
      match /messages/{messageId} {
        // READ: Members of the chat can read messages.
        allow read: if get(/databases/$(database)/documents/chats/$(chatId)).data.members.hasAny([request.auth.uid]);
        
        // CREATE: The sender must be a member of the chat.
        allow create: if request.auth.uid == request.resource.data.sender &&
                      get(/databases/$(database)/documents/chats/$(chatId)).data.members.hasAny([request.auth.uid]);
                      
        // UPDATE: The sender can update their own message.
        allow update: if request.auth.uid == resource.data.sender;
        
        // DELETE: The sender can delete their own message.
        allow delete: if request.auth.uid == resource.data.sender;
      }
    }
    
    // =====================================================================
    // Servers Collection
    // =====================================================================
    match /servers/{serverId} {
        // READ: Public servers are readable by anyone authenticated.
        // Private servers are only readable by members.
        allow read: if request.auth != null && (resource.data.isPublic == true || request.auth.uid in resource.data.members);

        // CREATE: User must be authenticated to create a server.
        allow create: if request.auth != null && request.auth.uid in request.resource.data.members;

        // UPDATE: Only the owner can update server details. Members can be added/removed.
        allow update: if request.auth != null && (request.auth.uid == resource.data.ownerId || request.auth.uid in request.resource.data.members);
        
        // DELETE: Only the owner can delete the server.
        allow delete: if request.auth != null && request.auth.uid == resource.data.ownerId;

        // Channels Sub-collection
        match /channels/{channelId} {
            // READ: Members of the server can read channels.
            allow read: if request.auth != null && get(/databases/$(database)/documents/servers/$(serverId)).data.members.hasAny([request.auth.uid]);

            // CREATE, UPDATE, DELETE: Only server owner can manage channels.
            allow write: if request.auth != null && request.auth.uid == get(/databases/$(database)/documents/servers/$(serverId)).data.ownerId;

            // Messages Sub-collection within a Channel
            match /messages/{messageId} {
                // READ: Members of the server can read messages.
                allow read: if request.auth != null && get(/databases/$(database)/documents/servers/$(serverId)).data.members.hasAny([request.auth.uid]);
                
                // CREATE: User must be a member of the server and the sender.
                allow create: if request.auth != null && request.auth.uid == request.resource.data.sender &&
                               get(/databases/$(database)/documents/servers/$(serverId)).data.members.hasAny([request.auth.uid]);
                               
                // UPDATE: User can only update their own messages.
                allow update: if request.auth != null && request.auth.uid == resource.data.sender;
                
                // DELETE: User can only delete their own messages.
                allow delete: if request.auth != null && request.auth.uid == resource.data.sender;
            }
        }
    }
  }
}
