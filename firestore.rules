rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper Functions
    function isAuth() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // USERS
    match /users/{userId} {
      allow read;
      allow create: if isAuth() && isOwner(userId);
      allow update: if isAuth() && isOwner(userId);
      allow delete: if isAuth() && isOwner(userId);
    }
    
    // CHATS (DMs)
    match /chats/{chatId} {
        allow read, delete: if isAuth() && request.auth.uid in resource.data.members;
        allow create: if isAuth() && request.auth.uid in request.resource.data.members;
        allow update: if isAuth() && request.auth.uid in resource.data.members;
        
        // MESSAGES (in DMs)
        match /messages/{messageId} {
             allow read, create: if isAuth() && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.members;
             allow update, delete: if isAuth() && request.auth.uid == resource.data.sender;
        }
    }
    
    // FRIEND REQUESTS
    match /friendRequests/{requestId} {
        allow read, update: if isAuth() && (request.auth.uid == resource.data.to || request.auth.uid == resource.data.from.id);
        allow create: if isAuth() && request.auth.uid == request.resource.data.from.id;
    }

    // SERVERS
    match /servers/{serverId} {
      allow read: if isAuth();

      allow create: if isAuth() && isOwner(request.resource.data.ownerId);

      allow update: if isAuth() && (
        isOwner(resource.data.ownerId) ||
        (request.resource.data.keys().hasOnly(['members']) && 
         request.resource.data.members.size() == resource.data.members.size() + 1 &&
         request.resource.data.members.hasAny(resource.data.members) &&
         !resource.data.members.hasAny([request.auth.uid]))
      );

      allow delete: if isAuth() && isOwner(resource.data.ownerId);

      // CHANNELS (in Servers)
      match /channels/{channelId} {
        allow read: if isAuth() && request.auth.uid in get(/databases/$(database)/documents/servers/$(serverId)).data.members;
        allow create, update, delete: if isAuth() && request.auth.uid == get(/databases/$(database)/documents/servers/$(serverId)).data.ownerId;
        
        // MESSAGES (in Channels)
        match /messages/{messageId} {
           allow read: if isAuth() && request.auth.uid in get(/databases/$(database)/documents/servers/$(serverId)).data.members;
           allow create: if isAuth() && request.auth.uid in get(/databases/$(database)/documents/servers/$(serverId)).data.members;
           allow update, delete: if isAuth() && isOwner(resource.data.sender);
        }
      }
    }
  }
}
