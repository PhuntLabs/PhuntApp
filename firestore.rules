rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Users Collection
    match /users/{userId} {
      // Allow anyone to read user profiles (needed for member lists, etc.)
      allow read: if request.auth != null;
      
      // Allow a user to create their OWN user document during signup
      allow create: if request.auth.uid == userId;
      
      // Allow a user to update their OWN profile
      allow update: if request.auth.uid == userId;
      
      // Users cannot delete their profiles
      allow delete: if false;
    }
    
    // Servers Collection
    match /servers/{serverId} {
        // Any authenticated user can read server info (for discovery/join pages)
        allow read: if request.auth != null;
        
        // Allow server owner to update/delete, and any user to join
        allow update: if (request.auth.uid == resource.data.ownerId) || 
                       (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['members']) &&
                        request.resource.data.members.hasAll(resource.data.members) &&
                        request.resource.data.members.size() == resource.data.members.size() + 1 &&
                        request.auth.uid in request.resource.data.members);

        allow delete: if request.auth.uid == resource.data.ownerId;
        
        // Anyone authenticated can create a server
        allow create: if request.auth != null;

        // Channel subcollection
        match /channels/{channelId} {
            // Any authenticated user can list/read channels (for join page)
            allow list, read: if request.auth != null;
            
            // Only server owner can create/update/delete channels
            allow write: if request.auth.uid == get(/databases/$(database)/documents/servers/$(serverId)).data.ownerId;

            // Messages subcollection within channels
            match /messages/{messageId} {
                // Allow read/create if the user is a member of the server
                allow read, create: if get(/databases/$(database)/documents/servers/$(serverId)).data.members.hasAny([request.auth.uid]);
                
                // Allow update/delete only by the message sender
                allow update, delete: if request.auth.uid == resource.data.sender;
            }
        }
    }
    
    // Chats Collection (Direct Messages)
    match /chats/{chatId} {
        // Allow read/update/delete only if user is a member of the chat
        allow read, update, delete: if request.auth.uid in resource.data.members;
        
        // Allow create only if the user is one of the members being added
        allow create: if request.auth.uid in request.resource.data.members;

        // Messages subcollection within DMs
        match /messages/{messageId} {
            // Allow read/create if user is a member of the chat
            allow read, create: if get(/databases/$(database)/documents/chats/$(chatId)).data.members.hasAny([request.auth.uid]);
            
            // Allow update/delete only if the message sender
            allow update, delete: if request.auth.uid == resource.data.sender;
        }
    }
    
    // Friend Requests Collection
    match /friendRequests/{requestId} {
        // Allow read only if user is the sender or receiver
        allow read: if request.auth.uid == resource.data.from.id || request.auth.uid == resource.data.to;
        
        // Allow create if user is the sender
        allow create: if request.auth.uid == request.resource.data.from.id;
        
        // Allow update (accept/decline) only by the receiver
        allow update: if request.auth.uid == resource.data.to;
    }
  }
}
