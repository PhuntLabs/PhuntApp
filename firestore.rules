
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    match /{document=**} {
      allow read, write: if false;
    }

    // Users can create their own user document, and anyone can read user profiles
    match /users/{userId} {
      allow read: if request.auth != null;
      allow create: if request.auth.uid == request.resource.data.uid;
      allow update: if request.auth.uid == userId;
    }
    
    match /friendRequests/{requestId} {
      allow create: if request.auth.uid == request.resource.data.from.id;
      allow read, update: if request.auth.uid == resource.data.to;
    }

    match /chats/{chatId} {
      // Allow a user to read, create, update, or delete a chat if their UID is in the members array.
      // The Firestore client query will only return documents that the user is allowed to read,
      // effectively filtering the chats for the current user.
      allow read, create, update, delete: if request.auth.uid in resource.data.members;

      match /messages/{messageId} {
        allow read, create: if request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.members;
        allow update, delete: if request.auth.uid == resource.data.sender;
      }
    }

    match /servers/{serverId} {
      // Any authenticated user can read public server info.
      allow read: if request.auth != null;
      
      // Users can create servers.
      allow create: if request.auth.uid == request.resource.data.ownerId;

      // An authenticated user can update a server if:
      // 1. They are the owner (for changing name, icon, etc.)
      // 2. They are adding THEMSELVES to the members list (joining the server)
      allow update: if request.auth.uid == resource.data.ownerId || 
                      (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['members']) &&
                       request.resource.data.members.size() == resource.data.members.size() + 1 &&
                       request.auth.uid in request.resource.data.members);
      
      // Only the owner can delete a server.
      allow delete: if request.auth.uid == resource.data.ownerId;

      match /channels/{channelId} {
        // Allow members to read channels
        allow read: if get(/databases/$(database)/documents/servers/$(serverId)).data.members.hasAny([request.auth.uid]);
        
        // Only server members can create/update/delete channels (delegated to server owner in UI)
        allow create, update, delete: if request.auth.uid == get(/databases/$(database)/documents/servers/$(serverId)).data.ownerId;

        match /messages/{messageId} {
          // A user can create/read a message if they are a member of the server.
          allow read, create: if get(/databases/$(database)/documents/servers/$(serverId)).data.members.hasAny([request.auth.uid]);
          // A user can update/delete a message if they are the sender.
          allow update, delete: if request.auth.uid == resource.data.sender;
        }
      }
    }
  }
}
