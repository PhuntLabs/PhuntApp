
rules_version = '2';

// Helper functions to keep rules DRY and readable
function isAuthenticated() {
  return request.auth != null;
}

function isUser(userId) {
  return isAuthenticated() && request.auth.uid == userId;
}

function isCreatingOwnProfile(userId) {
  // Allow user creation if the user is creating their own document.
  // The resource.data is the data that will be written.
  return isUser(userId) && resource.data.uid == userId;
}

function isValidUserProfile(data) {
  return data.displayName is string && data.displayName.size() > 2 && data.displayName.size() < 30
      && data.displayName_lowercase is string
      && data.email is string
      && data.uid == request.auth.uid
      && data.createdAt == request.time
      && data.photoURL is string;
}

function isMemberOf(collectionName, docId, userId) {
  return get(/databases/$(database)/documents/$(collectionName)/$(docId)).data.members.hasAny([userId]);
}

service cloud.firestore {
  match /databases/{database}/documents {

    //============================================================
    // Users Collection
    // - Anyone can read user data (needed for username checks, member lists)
    // - Only the user themselves can create or update their own profile
    //============================================================
    match /users/{userId} {
      // ANYONE can read user profiles. This is necessary for:
      // 1. New users to check if a username is taken during signup (unauthenticated read).
      // 2. Users to see other users' profiles (member lists, popovers).
      allow read: if true;

      // A user can only be CREATED if the user is authenticated and the UID in the document
      // matches their auth UID. This is the core of the signup process.
      // We also validate the shape of the data being written.
      allow create: if isCreatingOwnProfile(userId) && isValidUserProfile(request.resource.data);

      // A user can only UPDATE their own profile. They cannot update other users' profiles.
      allow update: if isUser(userId);

      // Users cannot delete their profiles through the client.
      allow delete: if false;
    }

    //============================================================
    // Friend Requests Collection
    // - Authenticated users can create requests
    // - Only the recipient can update the request (accept/decline)
    //============================================================
    match /friendRequests/{requestId} {
      // You can only read a friend request if you are the sender or the recipient.
      allow read: if isAuthenticated() && (request.auth.uid == resource.data.from.id || request.auth.uid == resource.data.to);

      // You can only create a friend request if you are authenticated and you are the sender.
      allow create: if isAuthenticated() && request.auth.uid == request.resource.data.from.id;

      // You can only update a friend request (to accept/decline) if you are the recipient.
      allow update: if isAuthenticated() && request.auth.uid == resource.data.to;

      // Nobody can delete friend requests directly.
      allow delete: if false;
    }

    //============================================================
    // Chats & Messages
    // - Users can only interact with chats they are members of.
    //================================m============================
    match /chats/{chatId} {
      // You can read a chat document IF you are a member of that chat.
      allow read: if isAuthenticated() && isMemberOf('chats', chatId, request.auth.uid);

      // You can create a chat IF you are authenticated and you are listed in the members array.
      allow create: if isAuthenticated() && request.auth.uid in request.resource.data.members;

      // You can update a chat (e.g., lastMessageTimestamp) IF you are a member.
      allow update: if isAuthenticated() && isMemberOf('chats', chatId, request.auth.uid);

      // You can delete a chat (leave it) IF you are a member.
      allow delete: if isAuthenticated() && isMemberOf('chats', chatId, request.auth.uid);

      // --- Messages Subcollection ---
      match /messages/{messageId} {
        // You can read messages in a chat IF you are a member of the parent chat.
        allow read: if isAuthenticated() && isMemberOf('chats', chatId, request.auth.uid);

        // You can create a message IF you are a member of the chat and you are the sender.
        allow create: if isAuthenticated() && isMemberOf('chats', chatId, request.auth.uid) && request.auth.uid == request.resource.data.sender;

        // You can update (edit) your own message.
        allow update: if isAuthenticated() && isUser(resource.data.sender);

        // You can delete your own message.
        allow delete: if isAuthenticated() && isUser(resource.data.sender);
      }
    }

    //============================================================
    // Servers, Channels & Messages
    // - Complex rules for public vs private servers and ownership.
    //============================================================
    match /servers/{serverId} {
      // You can read a server's main document if:
      // 1. The server is public (for the discovery page)
      // 2. You are a member of the server.
      allow read: if resource.data.isPublic == true || (isAuthenticated() && isMemberOf('servers', serverId, request.auth.uid));

      // Any authenticated user can create a new server.
      allow create: if isAuthenticated();
      
      // You can update a server document (e.g., join, change settings) if:
      // 1. You are joining (only adding yourself to members array).
      // 2. You are the owner of the server (for changing settings like name, icon).
      allow update: if (isAuthenticated() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['members']) && request.resource.data.members.hasAll(resource.data.members) && request.resource.data.members.size() == resource.data.members.size() + 1 && request.auth.uid in request.resource.data.members) || isUser(resource.data.ownerId);

      // Only the server owner can delete it.
      allow delete: if isAuthenticated() && isUser(resource.data.ownerId);

      // --- Channels Subcollection ---
      match /channels/{channelId} {
        // You can read channels of a server IF you have read access to the server itself.
        // This leverages the hierarchical nature of the rules.
        allow read: if get(/databases/$(database)/documents/servers/$(serverId)).data.isPublic == true || (isAuthenticated() && isMemberOf('servers', serverId, request.auth.uid));
        
        // Only the server owner can create, update, or delete channels.
        allow write: if isAuthenticated() && isUser(get(/databases/$(database)/documents/servers/$(serverId)).data.ownerId);
      }

      // --- Channel Messages Subcollection ---
      match /channels/{channelId}/messages/{messageId} {
        // You can read messages in a channel if you are a member of the server.
        allow read: if isAuthenticated() && isMemberOf('servers', serverId, request.auth.uid);

        // You can create a message if you are a member of the server and you are the sender.
        allow create: if isAuthenticated() && isMemberOf('servers', serverId, request.auth.uid) && request.auth.uid == request.resource.data.sender;
        
        // You can update/delete your own messages.
        allow update, delete: if isAuthenticated() && isUser(resource.data.sender);
      }
    }
  }
}
