
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // User Profiles
    match /users/{userId} {
      // Anyone authenticated can view user profiles (needed for search, member lists, etc.)
      allow read: if request.auth != null;
      
      // A user can only create their own profile
      allow create: if request.auth.uid == userId;
      
      // A user can only update their own profile
      allow update: if request.auth.uid == userId;
    }

    // Friend Requests
    match /friendRequests/{requestId} {
      // Allow reading a request if you are the sender or receiver
      allow read: if request.auth != null && (request.auth.uid == resource.data.from.id || request.auth.uid == resource.data.to);

      // Allow creating a request if you are the sender
      allow create: if request.auth != null && request.auth.uid == request.resource.data.from.id;

      // Allow updating (accepting/declining) if you are the receiver
      allow update: if request.auth != null && request.auth.uid == resource.data.to;
    }

    // Direct Message Chats
    match /chats/{chatId} {
      // Allow R/W if the user is a member of the chat
      allow read, update, delete: if request.auth != null && request.auth.uid in resource.data.members;
      
      // Allow creation if the user is in the members list being created
      allow create: if request.auth != null && request.auth.uid in request.resource.data.members;

      // Messages within a chat
      match /messages/{messageId} {
        // Allow R/W/D if the user is a member of the parent chat
        allow read: if get(/databases/$(database)/documents/chats/$(chatId)).data.members.hasAny([request.auth.uid]);
        allow create: if get(/databases/$(database)/documents/chats/$(chatId)).data.members.hasAny([request.auth.uid]);
        allow update, delete: if request.auth.uid == resource.data.sender;
      }
    }
    
    // Servers
    match /servers/{serverId} {
        // Allow reading if the server is public OR the user is a member
        allow read: if resource.data.isPublic == true || (request.auth != null && request.auth.uid in resource.data.members);
        
        // Allow server creation if the user is authenticated
        allow create: if request.auth != null;
        
        // Allow joining a server (updating members) if the user is authenticated
        allow update: if request.auth != null && (
            // Allow joining
            (request.resource.data.members == resource.data.members.concat([request.auth.uid])) ||
            // Allow owner to update anything
            (request.auth.uid == resource.data.ownerId)
        );

        // Allow owner to delete
        allow delete: if request.auth != null && request.auth.uid == resource.data.ownerId;

        // Channels within a server
        match /channels/{channelId} {
            // Allow R/W if user is a member of the parent server
            allow read: if get(/databases/$(database)/documents/servers/$(serverId)).data.members.hasAny([request.auth.uid]);
            
            // Only the server owner can create, update, delete channels
            allow create, update, delete: if request.auth != null && request.auth.uid == get(/databases/$(database)/documents/servers/$(serverId)).data.ownerId;
            
            // Messages within a channel
            match /messages/{messageId} {
                allow read: if get(/databases/$(database)/documents/servers/$(serverId)).data.members.hasAny([request.auth.uid]);
                allow create: if get(/databases/$(database)/documents/servers/$(serverId)).data.members.hasAny([request.auth.uid]);
                allow update, delete: if request.auth.uid == resource.data.sender;
            }
        }
    }
  }
}
