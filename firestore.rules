
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if user is the owner of a document
    function isOwner(docData) {
      return request.auth.uid == docData.ownerId;
    }
    
    // Helper function to check if user is a member of a server/chat
    function isMember(docData) {
      return request.auth.uid in docData.members;
    }
    
    // Helper function to check if user ID is being added to a list
    function userIsJoining(resource, requestResource) {
       return request.auth.uid in requestResource.data.members && !(request.auth.uid in resource.data.members)
    }

    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if request.auth.uid == userId;
      allow update: if request.auth.uid == userId;
    }

    match /chats/{chatId} {
      allow read, delete: if isAuthenticated() && isMember(resource.data);
      allow create: if isAuthenticated() && isMember(request.resource.data);
    }
    
    match /chats/{chatId}/messages/{messageId} {
      allow read, create: if isAuthenticated() && isMember(get(/databases/$(database)/documents/chats/$(chatId)).data);
      allow update, delete: if isAuthenticated() && request.auth.uid == resource.data.sender;
    }

    match /friendRequests/{requestId} {
      allow read: if isAuthenticated() && (request.auth.uid == resource.data.to || request.auth.uid == resource.data.from.id);
      allow create: if isAuthenticated() && request.auth.uid == request.resource.data.from.id;
      allow update: if isAuthenticated() && request.auth.uid == resource.data.to;
    }
    
    match /servers/{serverId} {
      // Allow read if the server is public OR if the user is a member.
      allow read: if isAuthenticated() && (resource.data.isPublic == true || isMember(resource.data));

      // Allow creation if the user is authenticated and is the owner
      allow create: if isAuthenticated() && isOwner(request.resource.data);
      
      // Allow updates if the user is the owner, OR if they are just adding themselves to the members list.
      allow update: if isAuthenticated() && (isOwner(resource.data) || userIsJoining(resource, request));

      // Allow deletion only if the user is the owner.
      allow delete: if isAuthenticated() && isOwner(resource.data);
    }

    match /servers/{serverId}/channels/{channelId} {
      // Allow R/W if the user is a member of the parent server
      allow read, create, update, delete: if isAuthenticated() && isMember(get(/databases/$(database)/documents/servers/$(serverId)).data);
    }
  }
}
