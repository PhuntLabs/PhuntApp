rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isUser(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }
    
    function isMemberOf(resourceId, resourceType) {
      return isSignedIn() && get(/databases/$(database)/documents/$(resourceType)/$(resourceId)).data.members[request.auth.uid] == true;
    }

    function isMemberOfChat(chatId) {
      return isSignedIn() && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.members;
    }
    
    function isMemberOfServer(serverId) {
       return isSignedIn() && request.auth.uid in get(/databases/$(database)/documents/servers/$(serverId)).data.members;
    }

    function isOwnerOf(resourceId, resourceType) {
        return isSignedIn() && request.auth.uid == get(/databases/$(database)/documents/$(resourceType)/$(resourceId)).data.ownerId;
    }
    
    function isFriendRequestRecipient(requestId) {
        return isSignedIn() && request.auth.uid == get(/databases/$(database)/documents/friendRequests/$(requestId)).data.to;
    }

    function isFriendRequestSender(requestId) {
      return isSignedIn() && request.auth.uid == get(/databases/$(database)/documents/friendRequests/$(requestId)).data.from.id;
    }

    // Collection: users
    match /users/{userId} {
      // Allow any authenticated user to read user profiles (for searching, DMs, etc.)
      allow read: if isSignedIn();
      
      // Allow users to create their own user document during signup
      allow create: if isUser(userId);

      // Allow users to update their own profile information
      allow update: if isUser(userId);

      // Users cannot delete their accounts through the API
      allow delete: if false;
    }
    
    // Collection: chats
    match /chats/{chatId} {
        allow read, update: if isMemberOfChat(chatId);
        allow create: if isSignedIn() && request.auth.uid in request.resource.data.members;
        allow delete: if isMemberOfChat(chatId);

        // Subcollection: messages
        match /messages/{messageId} {
            allow read: if isMemberOfChat(chatId);
            allow create: if isUser(request.resource.data.sender) && isMemberOfChat(chatId);
            allow update: if isUser(resource.data.sender);
            allow delete: if isUser(resource.data.sender);
        }
    }
    
     // Collection: servers
    match /servers/{serverId} {
        allow read: if isMemberOfServer(serverId) || resource.data.isPublic == true;
        allow create: if isUser(request.resource.data.ownerId);
        allow update: if isOwnerOf(serverId, 'servers');
        allow delete: if isOwnerOf(serverId, 'servers');
        
        // Subcollection: channels
        match /channels/{channelId} {
            allow read, create: if isMemberOfServer(serverId);
            allow update, delete: if isOwnerOf(serverId, 'servers');
            
             // Sub-Subcollection: messages
            match /messages/{messageId} {
                allow read: if isMemberOfServer(serverId);
                allow create: if isUser(request.resource.data.sender) && isMemberOfServer(serverId);
                allow update: if isUser(resource.data.sender);
                allow delete: if isUser(resource.data.sender);
            }
        }
    }
    
    // Collection: friendRequests
    match /friendRequests/{requestId} {
        allow read: if isFriendRequestRecipient(requestId) || isFriendRequestSender(requestId);
        allow create: if isUser(request.resource.data.from.id);
        allow update: if isFriendRequestRecipient(requestId) || isFriendRequestSender(requestId);
        allow delete: if false;
    }
  }
}
