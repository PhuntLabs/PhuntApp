rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    match /{document=**} {
      allow read, write: if false;
    }

    match /users/{userId} {
      allow read: if request.auth != null;
      allow list: if request.auth != null;
      allow create: if request.auth.uid == userId;
      allow update: if request.auth.uid == userId;
    }
    
    match /friendRequests/{requestId} {
      allow create: if request.auth.uid == request.resource.data.from.id;
      allow read, update: if request.auth.uid == resource.data.to;
    }

    match /chats/{chatId} {
      allow read, create, update, delete: if request.auth.uid in resource.data.members;

      match /messages/{messageId} {
        allow read, create: if request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.members;
        allow update, delete: if request.auth.uid == resource.data.sender;
      }
    }
    
    // This rule is crucial for the useChats hook to function
    match /chats/{chatId} {
       allow list: if request.auth.uid in request.query.filters.members;
    }

    match /servers/{serverId} {
      allow read: if request.auth != null;
      allow create: if request.auth.uid == request.resource.data.ownerId;
      allow update: if request.auth.uid == resource.data.ownerId || 
                      (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['members']) &&
                       request.resource.data.members.size() == resource.data.members.size() + 1 &&
                       request.auth.uid in request.resource.data.members);
      allow delete: if request.auth.uid == resource.data.ownerId;

      match /channels/{channelId} {
        allow read: if request.auth != null;
        allow create, update, delete: if get(/databases/$(database)/documents/servers/$(serverId)).data.members.hasAny([request.auth.uid]);

        match /messages/{messageId} {
          allow create, read: if get(/databases/$(database)/documents/servers/$(serverId)).data.members.hasAny([request.auth.uid]);
          allow update, delete: if request.auth.uid == resource.data.sender;
        }
      }
    }
     // Rule to allow querying servers collection for public servers or user's servers
    match /servers/{serverId} {
      allow list: if (request.query.filters.isPublic == true) || (request.auth.uid in request.query.filters.members);
    }
  }
}
