rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // User Profiles:
    // read: Any logged-in user can read any profile.
    // create: A logged-in user can create a user document. This is for signup.
    // update: A user can only update their own profile.
    match /users/{userId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && request.auth.uid == userId;
      allow update, delete: if request.auth.uid == userId;
    }
    
    // Direct Messages (Chats):
    // read, delete: User must be a member of the chat.
    // create: Logged-in users can create new chats.
    // update: Only for last message timestamp, must be a member.
    match /chats/{chatId} {
      allow read, delete: if request.auth.uid in resource.data.members;
      allow create: if request.auth != null;
      allow update: if request.auth.uid in resource.data.members;
      
      // Messages within a chat:
      // read, create: User must be a member of the parent chat.
      // update, delete: Only the message sender can modify it.
      match /messages/{messageId} {
        allow read: if get(/databases/$(database)/documents/chats/$(chatId)).data.members.hasAny([request.auth.uid]);
        allow create: if request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.members;
        allow update, delete: if request.auth.uid == resource.data.sender;
      }
    }
    
    // Servers:
    // read: Any authenticated user can read server info.
    // update: A user can join a server (add themselves to members) or the owner can update.
    match /servers/{serverId} {
        allow read: if request.auth != null;
        allow create: if request.auth.uid == request.resource.data.ownerId;
        allow update: if request.auth.uid == resource.data.ownerId 
                      || (request.resource.data.diff(resource.data).affectedKeys()
                          .hasOnly(['members']) 
                          && request.resource.data.members.size() == resource.data.members.size() + 1
                          && request.auth.uid in request.resource.data.members);

        // Channels within a server:
        // read: Any logged-in user can see channels.
        // create, update, delete: Only the server owner can manage channels.
        match /channels/{channelId} {
            allow read, list: if request.auth != null;
            allow create, update, delete: if get(/databases/$(database)/documents/servers/$(serverId)).data.ownerId == request.auth.uid;
            
            // Messages within a channel:
            // create: User must be a member of the parent server.
            // update, delete: Only the message sender can modify it.
            match /messages/{messageId} {
                allow read: if request.auth.uid in get(/databases/$(database)/documents/servers/$(serverId)).data.members;
                allow create: if request.auth.uid in get(/databases/$(database)/documents/servers/$(serverId)).data.members;
                allow update, delete: if request.auth.uid == resource.data.sender;
            }
        }
    }

    // Friend Requests:
    // read: Only the recipient can read it.
    // create: An authenticated user can create one.
    // update: The recipient can update the status (accept/decline).
    match /friendRequests/{requestId} {
        allow read: if request.auth.uid == resource.data.to;
        allow create: if request.auth.uid == request.resource.data.from.id;
        allow update: if request.auth.uid == resource.data.to;
    }
  }
}
