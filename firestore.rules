rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isAuth() {
      return request.auth != null;
    }

    function isUser(userId) {
      return isAuth() && request.auth.uid == userId;
    }

    function isMemberOfChat(chatId) {
      return isAuth() && get(/databases/$(database)/documents/chats/$(chatId)).data.members.hasAny([request.auth.uid]);
    }
    
    function isMemberOfServer(serverId) {
        return isAuth() && get(/databases/$(database)/documents/servers/$(serverId)).data.members.hasAny([request.auth.uid]);
    }
    
    function isOwnerOfServer(serverId) {
        return isUser(get(/databases/$(database)/documents/servers/$(serverId)).data.ownerId);
    }

    // Collection: users
    // - Anyone authenticated can read user profiles (for searching/adding friends).
    // - A user can only create their own document.
    // - A user can only update their own document.
    match /users/{userId} {
      allow read: if isAuth();
      allow create: if isUser(userId);
      allow update: if isUser(userId);
      allow delete: if false; // Users should not delete their profiles
    }

    // Collection: chats
    // - Users can only read/write to chats they are members of.
    match /chats/{chatId} {
      allow read, delete: if isMemberOfChat(chatId);
      allow create: if isAuth() && request.resource.data.members.hasAny([request.auth.uid]);
      allow update: if isMemberOfChat(chatId);
      
      // Messages subcollection
      // - Users can only read/write messages in chats they belong to.
      match /messages/{messageId} {
        allow read, create: if isMemberOfChat(chatId);
        allow update, delete: if isMemberOfChat(chatId) && isUser(resource.data.sender);
      }
    }

    // Collection: friendRequests
    // - User can create if they are the sender.
    // - Target user can update (accept/decline).
    // - Involved users can read.
    match /friendRequests/{requestId} {
       allow create: if isUser(request.resource.data.from.id);
       allow read, update: if isAuth() && resource.data.members.hasAny([request.auth.uid]);
       allow delete: if false;
    }
    
    // Collection: servers
    match /servers/{serverId} {
        // Allow create for any authenticated user
        allow create: if isAuth();
        
        // Members can read server info. Owner can update/delete.
        allow read: if isMemberOfServer(serverId);
        allow update: if isOwnerOfServer(serverId) || (isMemberOfServer(serverId) && request.resource.data.keys().hasOnly(['members'])); // Members can only join/leave
        allow delete: if isOwnerOfServer(serverId);
        
        // Channels subcollection
        match /channels/{channelId} {
            // Only server members can read channels
            allow read: if isMemberOfServer(serverId);
            // Only server owner can manage channels
            allow create, update, delete: if isOwnerOfServer(serverId);
            
            // Messages subcollection within a channel
            match /messages/{messageId} {
                // Only members of the server can read/create messages
                allow read, create: if isMemberOfServer(serverId);
                // Only the original sender can update/delete their own message
                allow update, delete: if isMemberOfServer(serverId) && isUser(resource.data.sender);
            }
        }
    }
  }
}
