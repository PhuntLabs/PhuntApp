rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Users Collection
    match /users/{userId} {
      // Anyone can create their own user document, which is checked during signup.
      allow create: if request.auth != null && request.auth.uid == userId;
      // Any authenticated user can read any user's profile to see profiles, add friends, etc.
      allow read: if request.auth != null;
      // A user can only update their own profile.
      allow update: if request.auth != null && request.auth.uid == userId;
      // Users cannot delete their profiles for now.
      allow delete: if false;
    }

    // Friend Requests Collection
    match /friendRequests/{requestId} {
        // Logged-in users can create requests if they are the sender
        allow create: if request.auth != null && request.resource.data.from.id == request.auth.uid;
        // Involved users can read the request
        allow read: if request.auth != null && (request.resource.data.to == request.auth.uid || request.resource.data.from.id == request.auth.uid);
        // The recipient can update the status (accept/decline)
        allow update: if request.auth != null && request.resource.data.to == request.auth.uid;
        // No one can delete requests for history purposes
        allow delete: if false;
    }

    // Chats Collection
    match /chats/{chatId} {
        // Members of the chat can read/write to it.
        allow read, write: if request.auth != null && request.auth.uid in resource.data.members;

        // Messages Subcollection
        match /messages/{messageId} {
            // Members of the chat can read messages.
            allow read: if request.auth != null && get(/databases/$(database)/documents/chats/$(chatId)).data.members.hasAny([request.auth.uid]);
            // Members of the chat can create messages.
            allow create: if request.auth != null && get(/databases/$(database)/documents/chats/$(chatId)).data.members.hasAny([request.auth.uid]) && request.resource.data.sender == request.auth.uid;
            // Only the sender can edit or delete their own message.
            allow update, delete: if request.auth != null && get(/databases/$(database)/documents/chats/$(chatId)/messages/$(messageId)).data.sender == request.auth.uid;
        }
    }
    
    // Servers Collection
    match /servers/{serverId} {
        // Any authenticated user can create a server.
        allow create: if request.auth != null;
        // Public servers can be read by anyone authenticated, private servers only by members.
        allow read: if (resource.data.isPublic == true && request.auth != null) || (request.auth != null && request.auth.uid in resource.data.members);
        // Server members can join (update members array). Server owner can update everything else.
        allow update: if request.auth != null && (request.auth.uid == resource.data.ownerId || (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['members']) && request.auth.uid in request.resource.data.members));
        // Only the owner can delete the server.
        allow delete: if request.auth != null && request.auth.uid == resource.data.ownerId;
        
        // Channels Subcollection
        match /channels/{channelId} {
            // Members of the server can read channels.
            allow read: if request.auth != null && get(/databases/$(database)/documents/servers/$(serverId)).data.members.hasAny([request.auth.uid]);
            // Only the server owner can create/update/delete channels.
            allow create, update, delete: if request.auth != null && get(/databases/$(database)/documents/servers/$(serverId)).data.ownerId == request.auth.uid;
            
            // Messages Subcollection within Channels
            match /messages/{messageId} {
                // Members of the server can read messages.
                allow read: if request.auth != null && get(/databases/$(database)/documents/servers/$(serverId)).data.members.hasAny([request.auth.uid]);
                // Members of the server can create messages.
                allow create: if request.auth != null && get(/databases/$(database)/documents/servers/$(serverId)).data.members.hasAny([request.auth.uid]) && request.resource.data.sender == request.auth.uid;
                // Only the sender can edit or delete their own messages.
                allow update, delete: if request.auth != null && get(/databases/$(database)/documents/servers/$(serverId)/channels/$(channelId)/messages/$(messageId)).data.sender == request.auth.uid;
            }
        }
    }
  }
}
