
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if a user is the owner of a document
    function isOwner(docData) {
        return request.auth.uid == docData.ownerId;
    }

    // Helper function to check if a user is a member of a server
    function isServerMember(serverId) {
        return isAuthenticated() && request.auth.uid in get(/databases/$(database)/documents/servers/$(serverId)).data.members;
    }

    match /users/{userId} {
      // Users can read any profile (e.g. for DMs, member lists)
      allow read: if isAuthenticated();
      // Users can only create their own user document and can only update their own.
      allow create, update: if isAuthenticated() && request.auth.uid == userId;
    }

    match /chats/{chatId} {
      // A user can only access a chat if they are a member of it.
      allow read, delete: if isAuthenticated() && request.auth.uid in resource.data.members;
      allow create: if isAuthenticated(); // More specific rules on who can create might be needed
      
      match /messages/{messageId} {
          // A user can read/write messages in a chat they are a member of.
          allow read, create: if isAuthenticated() && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.members;
          // A user can only update/delete their own messages.
          allow update, delete: if isAuthenticated() && request.auth.uid == resource.data.sender;
      }
    }
    
    match /friendRequests/{requestId} {
        // A user can create a request if they are authenticated.
        allow create: if isAuthenticated();
        // A user can read a request if they are the sender or receiver.
        allow read: if isAuthenticated() && (request.auth.uid == resource.data.from.id || request.auth.uid == resource.data.to);
        // A user can update (accept/decline) a request only if they are the recipient.
        allow update: if isAuthenticated() && request.auth.uid == resource.data.to;
    }

    match /servers/{serverId} {
        // Allow reading if the server is public or the user is a member
        allow read: if (isAuthenticated() && resource.data.isPublic == true) || isServerMember(serverId);
        
        // Allow server creation by any authenticated user
        allow create: if isAuthenticated();
        
        // Allow server update only by the owner, OR allow any authenticated user to join (update the members array)
        allow update: if isOwner(resource.data) || 
                      (isAuthenticated() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['members']) && 
                       request.resource.data.members.size() == resource.data.members.size() + 1);

        // Allow server deletion only by the owner
        allow delete: if isOwner(resource.data);

        match /channels/{channelId} {
            // Allow members to read channels
            allow read, create: if isServerMember(serverId);
            // Only the server owner can update/delete channels
            allow update, delete: if isOwner(get(/databases/$(database)/documents/servers/$(serverId)).data);
        
            match /messages/{messageId} {
                // Allow members to read and create messages
                allow read, create: if isServerMember(serverId);
                // Allow users to only update/delete their own messages
                allow update, delete: if isAuthenticated() && request.auth.uid == resource.data.sender;
            }
        }
    }
  }
}
