
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // =====================================================================
    //
    // HELPER FUNCTIONS
    //
    // =====================================================================
    
    // Check if the user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Check if the user is the owner of a document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    // Check if a user document is valid before creation
    function isValidNewUser(userId, data) {
      return isOwner(userId)
        && data.displayName is string && data.displayName.size() > 2 && data.displayName.size() < 30
        && data.displayName_lowercase == data.displayName.toLowerCase()
        && data.email == request.auth.token.email
        && data.uid == userId
        && data.createdAt == request.time
        && data.photoURL is string;
    }
    
    // Check if a user is a member of a given server
    function isServerMember(serverId) {
        return isAuthenticated() && get(/databases/$(database)/documents/servers/$(serverId)).data.members.hasAny([request.auth.uid]);
    }
    
     // Check if a user is the owner of a given server
    function isServerOwner(serverId) {
        return isAuthenticated() && get(/databases/$(database)/documents/servers/$(serverId)).data.ownerId == request.auth.uid;
    }
    
    // Check if a user is a member of a given chat
    function isChatMember(chatId) {
        return isAuthenticated() && get(/databases/$(database)/documents/chats/$(chatId)).data.members.hasAny([request.auth.uid]);
    }
    
    // =====================================================================
    //
    // COLLECTION RULES
    //
    // =====================================================================

    // USERS
    // Publicly readable for profile lookups and username checks.
    // Users can only create their own profile and update their own data.
    match /users/{userId} {
      allow read;
      allow create: if isValidNewUser(userId, request.resource.data);
      allow update: if isOwner(userId);
      allow delete: if false; // Users should not be able to delete their profiles
    }
    
    // SERVERS
    // All servers are listable/readable for the Discovery page.
    // Detailed channel/message access is controlled at a deeper level.
    // Users can only create servers if authenticated.
    // Only owners can update or delete servers.
    match /servers/{serverId} {
      allow read; // Allow reading server info for discovery/join pages
      allow create: if isAuthenticated();
      allow update: if isServerOwner(serverId) // Server settings updates
                   || (isAuthenticated() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['members'])); // Joining/leaving
      allow delete: if isServerOwner(serverId);

      // CHANNELS
      // Readable by server members, writable only by the owner.
      match /channels/{channelId} {
        allow read: if isServerMember(serverId);
        allow create, update, delete: if isServerOwner(serverId);

        // MESSAGES
        // Readable by server members.
        // Members can create messages.
        // Users can only edit/delete their own messages.
        match /messages/{messageId} {
          allow read: if isServerMember(serverId);
          allow create: if isServerMember(serverId);
          allow update, delete: if isServerMember(serverId) && resource.data.sender == request.auth.uid;
        }
      }
    }
    
    // CHATS (Direct Messages)
    // Users can only access chats they are a member of.
    match /chats/{chatId} {
      allow read, delete: if isChatMember(chatId);
      allow create: if isAuthenticated() && request.auth.uid in request.resource.data.members;
      
      // CHAT MESSAGES
      match /messages/{messageId} {
        allow read, create: if isChatMember(chatId);
        allow update, delete: if isChatMember(chatId) && resource.data.sender == request.auth.uid;
      }
    }
    
    // FRIEND REQUESTS
    // Users can create requests.
    // Only the recipient can update the status (accept/decline).
    // Readable only by involved parties to prevent snooping.
    match /friendRequests/{requestId} {
       allow read: if isAuthenticated() && request.auth.uid in resource.data.members;
       allow create: if isAuthenticated() && request.auth.uid == request.resource.data.from.id;
       allow update: if isAuthenticated() && request.auth.uid == resource.data.to;
       allow delete: if false;
    }
  }
}
