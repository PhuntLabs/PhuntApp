
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to get incoming resource data
    function getAfter() {
      return request.resource.data;
    }

    // Users collection
    match /users/{userId} {
      allow read: if isAuthenticated();
      allow create: if isAuthenticated() && request.resource.data.uid == request.auth.uid;
      allow update: if isAuthenticated() && request.auth.uid == userId;
    }

    // Chats collection (Direct Messages)
    match /chats/{chatId} {
      allow read, delete: if isAuthenticated() && request.auth.uid in resource.data.members;
      allow create: if isAuthenticated() && request.auth.uid in getAfter().members;
      
      // Messages subcollection
      match /messages/{messageId} {
        allow read, create: if isAuthenticated() && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.members;
        allow update, delete: if isAuthenticated() && getAfter().sender == request.auth.uid;
      }
    }

    // Friend Requests collection
    match /friendRequests/{requestId} {
        allow read, update: if isAuthenticated() && request.auth.uid in resource.data.members || request.auth.uid == resource.data.to;
        allow create: if isAuthenticated() && request.auth.uid == getAfter().from.id;
    }
    
    // Servers collection
    match /servers/{serverId} {
      allow read: if isAuthenticated() && request.auth.uid in resource.data.members;
      allow create: if isAuthenticated() && request.auth.uid == getAfter().ownerId && request.auth.uid in getAfter().members;
      
      // Channels subcollection
      match /channels/{channelId} {
        allow read, create: if isAuthenticated() && request.auth.uid in get(/databases/$(database)/documents/servers/$(serverId)).data.members;
      }
    }
  }
}
