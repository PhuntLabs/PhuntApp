
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Users: Can read anyone's profile, but only write to their own.
    match /users/{userId} {
      allow read;
      allow write: if request.auth.uid == userId;
    }

    // Friend Requests: Can only be created by the sender.
    // Can only be updated by the recipient.
    match /friendRequests/{requestId} {
      allow read: if request.auth.uid in resource.data.members;
      allow create: if request.auth.uid == request.resource.data.from.id;
      allow update: if request.auth.uid == resource.data.to;
    }

    // Chats: Can only be read/written by members of the chat.
    match /chats/{chatId} {
      allow read, write: if request.auth.uid in resource.data.members;
      
      // Messages: Only members can read/write messages.
      match /messages/{messageId} {
        allow read, create: if request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.members;
        allow update, delete: if request.auth.uid == resource.data.sender;
      }
    }
    
    // Servers:
    match /servers/{serverId} {
        // Allow read if user is a member OR if the server is public.
        allow read: if request.auth.uid in resource.data.members || resource.data.isPublic == true;
        // Allow create.
        allow create: if request.auth.uid != null;
        // Allow updates (like joining, changing name) if user is a member.
        // Allow owner to make any change.
        allow update: if request.auth.uid == resource.data.ownerId || request.auth.uid in resource.data.members;
        // Allow delete only by owner.
        allow delete: if request.auth.uid == resource.data.ownerId;
        
        // Channels:
        match /channels/{channelId} {
            // Allow read/write for server members.
            allow read, write: if request.auth.uid in get(/databases/$(database)/documents/servers/$(serverId)).data.members;

            // Messages within channels
            match /messages/{messageId} {
                allow read, create: if request.auth.uid in get(/databases/$(database)/documents/servers/$(serverId)).data.members;
                allow update, delete: if request.auth.uid == resource.data.sender;
            }
        }
    }
  }
}
