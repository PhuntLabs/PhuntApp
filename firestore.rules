rules_version = '2';

// Helper functions to reduce repetition
function isSignedIn() {
  return request.auth != null;
}

function isUser(userId) {
  return isSignedIn() && request.auth.uid == userId;
}

function isDataOwner(resource) {
    return isUser(resource.data.ownerId);
}

function isMember(collectionName, resourceId) {
    return isSignedIn() && resourceId in get(/databases/$(database)/documents/$(collectionName)/$(resourceId)).data.members;
}

function getIncomingData() {
  return request.resource.data;
}

function getExistingData() {
    return resource.data;
}

service cloud.firestore {
  match /databases/{database}/documents {

    // Users Collection
    // Allows public read for username checks & profile viewing.
    // Users can only create their own profile and update their own data.
    match /users/{userId} {
      allow read;
      allow create: if isUser(userId)
                    && getIncomingData().uid == userId
                    && getIncomingData().displayName_lowercase == getIncomingData().displayName.lower();
      allow update: if isUser(userId);
      allow delete: if false; // Users should not be able to delete their accounts directly
    }

    // Friend Requests
    // Users can create requests. Only the recipient can update the status (accept/decline).
    match /friendRequests/{requestId} {
      allow read: if isSignedIn() && (request.auth.uid == getExistingData().from.id || request.auth.uid == getExistingData().to);
      allow create: if isSignedIn() && request.auth.uid == getIncomingData().from.id;
      allow update: if isSignedIn() && request.auth.uid == getExistingData().to; // Only recipient can change status
      allow delete: if false;
    }

    // Chats & Messages
    // Users can only interact with chats they are a member of.
    match /chats/{chatId} {
      allow read, delete: if isMember('chats', chatId);
      allow create: if isSignedIn() && request.auth.uid in getIncomingData().members;
      allow update: if isMember('chats', chatId); // For updating lastMessageTimestamp

      // Messages Subcollection
      match /messages/{messageId} {
        allow read, create: if isMember('chats', chatId);
        allow update, delete: if isMember('chats', chatId) && isUser(getExistingData().sender); // Only the author of a message can edit/delete it.
      }
    }

    // Servers
    // Public servers are readable by anyone.
    // Members can read server details. Owners can update/delete.
    match /servers/{serverId} {
      allow read: if getExistingData().isPublic == true || isMember('servers', serverId);

      // Members can join or leave a server.
      allow update: if (isDataOwner(resource) && getIncomingData().diff(getExistingData()).affectedKeys().hasOnly(['name', 'photoURL', 'isPublic', 'description', 'customEmojis', 'roles', 'customInviteLink']))
                    || (isSignedIn() && request.auth.uid in getIncomingData().members && !(request.auth.uid in getExistingData().members)) // Joining
                    || (isSignedIn() && !(request.auth.uid in getIncomingData().members) && request.auth.uid in getExistingData().members); // Leaving
                    
      allow create: if isSignedIn() && request.auth.uid == getIncomingData().ownerId;
      allow delete: if isDataOwner(resource);

        // Channels Subcollection
        // Only members of a server can read its channels.
        // Only the server owner can manage channels.
        match /channels/{channelId} {
            allow read: if isMember('servers', serverId);
            allow create, update, delete: if isDataOwner(get(/databases/$(database)/documents/servers/$(serverId)));

            // Channel Messages Subcollection
            // Only server members can read/write messages in channels.
            match /messages/{messageId} {
                allow read, create: if isMember('servers', serverId);
                allow update, delete: if isMember('servers', serverId) && isUser(getExistingData().sender);
            }
        }
    }
  }
}
