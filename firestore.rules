rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isUser(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    // USER PROFILES
    match /users/{userId} {
      // Anyone can read a user's public profile
      allow get: if true;
      // Only the user themselves can create or update their own profile
      allow write: if isUser(userId);
    }
    
    // CHATS
    match /chats/{chatId} {
      // Users can only read/write chats they are a member of
      allow read, write: if isSignedIn() && resource.data.members.hasAny([request.auth.uid]);
      
      // Messages subcollection
      match /messages/{messageId} {
        // Allow read if user is a member of the parent chat
        allow read: if isSignedIn() && get(/databases/$(database)/documents/chats/$(chatId)).data.members.hasAny([request.auth.uid]);
        // Allow write if user is the sender
        allow create: if isUser(request.resource.data.sender);
        allow update, delete: if isUser(resource.data.sender);
      }
    }

    // FRIEND REQUESTS
    match /friendRequests/{requestId} {
      // Allow read if the user is the sender or receiver
      allow read: if isSignedIn() && resource.data.members.hasAny([request.auth.uid]);
      // Allow create if the user is the sender
      allow create: if isUser(request.resource.data.from.id);
      // Allow update if user is the receiver (for accepting/declining)
      allow update: if isUser(resource.data.to);
    }
    
    // SERVERS
    match /servers/{serverId} {
        // Allow anyone to read public servers
        allow get: if resource.data.isPublic == true || (isSignedIn() && resource.data.members.hasAny([request.auth.uid]));
        allow list: if resource.data.isPublic == true;
        
        // Allow authenticated users to create servers
        allow create: if isSignedIn();
        
        // Allow server owner to update/delete
        allow update, delete: if isSignedIn() && resource.data.ownerId == request.auth.uid;
        
        // Channels subcollection
        match /channels/{channelId} {
            allow read, write: if isSignedIn() && get(/databases/$(database)/documents/servers/$(serverId)).data.members.hasAny([request.auth.uid]);
            
             // Messages subcollection within channels
            match /messages/{messageId} {
                allow read: if isSignedIn() && get(/databases/$(database)/documents/servers/$(serverId)).data.members.hasAny([request.auth.uid]);
                allow create: if isUser(request.resource.data.sender);
                allow update, delete: if isUser(resource.data.sender);
            }
        }
    }
    
    // MENTIONS
    match /mentions/{mentionId} {
        allow create: if isSignedIn();
        allow read: if isUser(resource.data.mentionedUserId);
    }

    // BADGES
    match /badges/{badgeId} {
      allow read: if true;
      allow create: if isSignedIn(); // Add more specific rules if needed
    }
    
    // CALLS
    match /calls/{callId} {
      // Allow create if the user is the caller
      allow create: if isUser(request.resource.data.caller.uid);
      // Allow read/update if the user is the caller or callee
      allow read, update: if isSignedIn() && (isUser(resource.data.caller.uid) || isUser(resource.data.callee.uid));
    }
  }
}
