
rules_version = '2';

// The overall service is Firestore
service cloud.firestore {
  // All paths are matched against the project's database
  match /databases/{database}/documents {

    // =====================================================================
    //
    // HELPER FUNCTIONS
    //
    // These functions make the rules more readable and reusable.
    //
    // =====================================================================

    // Returns true if the user is authenticated.
    function isAuthenticated() {
      return request.auth != null;
    }

    // Returns true if the user's ID matches the provided userId.
    function isUser(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Returns true if the request is to create a document for the signed-in user.
    function isCreatingOwnDocument(userId) {
        return isUser(userId) && request.resource.data.uid == userId;
    }

    // Returns true if the incoming data for a user profile is valid.
    function isValidUserProfile(data) {
        return data.displayName is string &&
               data.displayName.size() > 2 &&
               data.displayName.size() < 30 &&
               data.displayName_lowercase == data.displayName.lower() &&
               data.email is string &&
               data.createdAt is timestamp;
    }
    
    // Returns true if the user is a member of the given server.
    function isServerMember(serverId) {
      return isAuthenticated() && get(/databases/$(database)/documents/servers/$(serverId)).data.members.hasAny([request.auth.uid]);
    }
    
    // Returns true if the user is the owner of the given server.
    function isServerOwner(serverId) {
        return isAuthenticated() && get(/databases/$(database)/documents/servers/$(serverId)).data.ownerId == request.auth.uid;
    }
    
    // Returns true if the server is public.
    function isPublicServer(serverId) {
      return get(/databases/$(database)/documents/servers/$(serverId)).data.isPublic == true;
    }

    // Returns true if the user is a member of the given chat.
    function isChatMember(chatId) {
      return isAuthenticated() && get(/databases/$(database)/documents/chats/$(chatId)).data.members.hasAny([request.auth.uid]);
    }
    
    // =====================================================================
    //
    // COLLECTION RULES
    //
    // =====================================================================

    //
    // USERS collection
    // Rules for user profile documents.
    //
    match /users/{userId} {
      // ANYONE can read user profiles.
      // This is needed for username uniqueness checks, fetching member profiles, and friend requests.
      allow read;
      
      // A user can only CREATE their own profile document, and only if the data is valid.
      // This is less strict to allow for signup, but validates data integrity.
      allow create: if isCreatingOwnDocument(userId) && isValidUserProfile(request.resource.data);

      // A user can only UPDATE their own profile.
      allow update: if isUser(userId);

      // No one can delete a user profile for now to preserve data integrity.
      allow delete: if false;
    }
    
    //
    // FRIEND REQUESTS collection
    // Rules for friend request documents.
    //
    match /friendRequests/{requestId} {
        // Authenticated users can READ friend requests sent TO them.
        allow read: if isAuthenticated() && resource.data.to == request.auth.uid;

        // Authenticated users can CREATE a friend request.
        allow create: if isAuthenticated() && request.resource.data.from.id == request.auth.uid;

        // The recipient of a friend request can UPDATE its status (to accept/decline).
        allow update: if isAuthenticated() && resource.data.to == request.auth.uid;

        // No one can delete friend requests directly.
        allow delete: if false;
    }

    //
    // CHATS collection and subcollections
    // Rules for direct message chats.
    //
    match /chats/{chatId} {
        // Users can only READ chat documents if they are a member of that chat.
        allow read: if isChatMember(chatId);
        // Users can only CREATE chat documents if they are a member of the new chat.
        allow create: if isChatMember(chatId);
        // Only members can UPDATE chat details (like last message timestamp).
        allow update: if isChatMember(chatId);
        // Only members can DELETE chats.
        allow delete: if isChatMember(chatId);

        // Rules for messages within a chat.
        match /messages/{messageId} {
            // Only members of the chat can read messages.
            allow list, get: if isChatMember(chatId);
            // Only members of the chat can create messages.
            allow create: if isChatMember(chatId);
            // Only the sender of a message can update it.
            allow update: if isChatMember(chatId) && resource.data.sender == request.auth.uid;
            // Only the sender of a message can delete it.
            allow delete: if isChatMember(chatId) && resource.data.sender == request.auth.uid;
        }
    }

    //
    // SERVERS collection and subcollections
    // Rules for servers and their content.
    //
    match /servers/{serverId} {
        // ANYONE can read a server document IF it is public.
        // Members can read any server they belong to.
        allow get: if isPublicServer(serverId) || isServerMember(serverId);
        // Authenticated users can list all public servers for discovery.
        allow list: if request.query.get('where[0][2]') == true; // where('isPublic', '==', true)

        // Authenticated users can CREATE servers.
        allow create: if isAuthenticated();
        // Only the owner can UPDATE server-level details.
        // Members can UPDATE the members array to join/leave.
        allow update: if isServerOwner(serverId) || (isAuthenticated() && request.resource.data.diff(resource.data).affectedKeys.hasOnly(['members']));
        // Only the server owner can DELETE a server.
        allow delete: if isServerOwner(serverId);

        // Rules for channels within a server.
        match /channels/{channelId} {
            // Only server members can read channels.
            allow read: if isServerMember(serverId);
            // Only the server owner can create, update, or delete channels.
            allow write: if isServerOwner(serverId);

            // Rules for messages within a channel.
            match /messages/{messageId} {
                // Only server members can read messages.
                allow read: if isServerMember(serverId);
                // Only server members can create messages.
                allow create: if isServerMember(serverId);
                // Only the message sender can update or delete their message.
                allow update, delete: if isServerMember(serverId) && resource.data.sender == request.auth.uid;
            }
        }
    }
  }
}
