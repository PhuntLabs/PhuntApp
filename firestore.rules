rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    match /users/{userId} {
      // Allow anyone to query the users collection to check for usernames during signup.
      // This is safe as user documents should not contain private info.
      allow list: if true;
      // Allow any authenticated user to read user profiles (needed for member lists, etc.)
      allow read: if request.auth != null;
      // A user can only create their own user document.
      allow create: if request.auth.uid == userId;
      // A user can only update their own user document.
      allow update: if request.auth.uid == userId;
    }
    
    match /friendRequests/{requestId} {
      // Allow a user to create a friend request if they are the sender.
      allow create: if request.auth.uid == request.resource.data.from.id;
      // Allow a user to read a request if they are the sender or receiver.
      allow read: if request.auth.uid == resource.data.to || request.auth.uid == resource.data.from.id;
      // Allow a user to update a request (accept/decline) only if they are the receiver.
      allow update: if request.auth.uid == resource.data.to;
    }

    match /chats/{chatId} {
      // Allow read/write operations on a chat if the user is a member of that chat.
      // This rule allows the query in useChats to work, as it filters the results to only what the user can read.
      allow read, update, delete: if request.auth.uid in resource.data.members;
      // Allow a user to create a chat if they are including themselves in the members list.
      allow create: if request.auth.uid in request.resource.data.members;

      match /messages/{messageId} {
        // Allow read/create on messages if the user is a member of the parent chat.
        allow read, create: if request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.members;
        // Allow update/delete only if the user is the sender of the message.
        allow update, delete: if request.auth.uid == resource.data.sender;
      }
    }

    match /servers/{serverId} {
      // Any authenticated user can read public server information.
      allow read: if request.auth != null;
      
      // Allow creation if the user is the owner.
      allow create: if request.auth.uid == request.resource.data.ownerId;

      // Allow updates if the user is the owner, OR if they are only adding themselves to the members list.
      allow update: if request.auth.uid == resource.data.ownerId || 
                      (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['members']) &&
                       request.resource.data.members.size() == resource.data.members.size() + 1 &&
                       request.auth.uid in request.resource.data.members);
      
      // Only the owner can delete a server.
      allow delete: if request.auth.uid == resource.data.ownerId;

      match /channels/{channelId} {
        // Any authenticated user can read channel info.
        allow read: if request.auth != null;
        
        // Only server members can manage channels.
        allow create, update, delete: if get(/databases/$(database)/documents/servers/$(serverId)).data.members.hasAny([request.auth.uid]);

        match /messages/{messageId} {
          // A user must be a member of the server to read or create messages.
          allow read, create: if get(/databases/$(database)/documents/servers/$(serverId)).data.members.hasAny([request.auth.uid]);
          // A user can only update/delete their own messages.
          allow update, delete: if request.auth.uid == resource.data.sender;
        }
      }
    }
  }
}
