rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Users
    // - Anyone can query the users collection to find other users by username
    // - Anyone can read a user's profile
    // - A user can only create their own profile
    // - A user can only update or delete their own profile
    match /users/{userId} {
      allow list: if request.auth != null;
      allow read: if true;
      allow create: if request.auth.uid == userId;
      allow update, delete: if request.auth.uid == userId;
    }

    // Friend Requests
    // - A user can only create a request FROM themselves
    // - A request can only be created if one doesn't already exist between the two users
    // - The sender or receiver can read the request
    // - Only the receiver can update the request (to accept/decline)
    match /friendRequests/{requestId} {
      allow create: if request.auth.uid == request.resource.data.from.id
                    && !exists(/databases/$(database)/documents/friendRequests/$(requestId))
                    && !(get(/databases/$(database)/documents/chats/$(request.resource.data.members.join('_'))).data.members[0] == request.resource.data.members[0]);
      allow read: if request.auth.uid == resource.data.to || request.auth.uid == resource.data.from.id;
      allow update: if request.auth.uid == resource.data.to;
      allow delete: if false; // Requests are not deleted, only status updated
    }

    // Chats & Messages
    // - A user can only perform actions on a chat if they are a member
    // - This applies to reading, writing, updating, and deleting chats and messages
    match /chats/{chatId} {
      allow read, update, delete: if request.auth.uid in resource.data.members;
      allow create: if request.auth.uid in request.resource.data.members;

      match /messages/{messageId} {
        allow read: if get(/databases/$(database)/documents/chats/$(chatId)).data.members.hasAny([request.auth.uid]);
        allow create: if get(/databases/$(database)/documents/chats/$(chatId)).data.members.hasAny([request.auth.uid])
                      && request.auth.uid == request.resource.data.sender;
        allow update, delete: if get(/databases/$(database)/documents/chats/$(chatId)).data.members.hasAny([request.auth.uid])
                               && request.auth.uid == resource.data.sender;
      }
    }
    
    // Servers & Channels
    // - Anyone logged in can read server/channel info
    // - Creating a server is handled by client logic
    // - Only server owner can update/delete server/channels
    // - Messages can only be sent by server members
    match /servers/{serverId} {
      allow read: if request.auth != null;
      allow create: if request.auth.uid == request.resource.data.ownerId;
      allow update: if request.auth.uid == resource.data.ownerId;
      allow delete: if request.auth.uid == resource.data.ownerId;

      match /channels/{channelId} {
        allow read: if request.auth != null;
        allow create, update, delete: if get(/databases/$(database)/documents/servers/$(serverId)).data.ownerId == request.auth.uid;
      
        match /messages/{messageId} {
           allow read: if get(/databases/$(database)/documents/servers/$(serverId)).data.members.hasAny([request.auth.uid]);
           allow create: if get(/databases/$(database)/documents/servers/$(serverId)).data.members.hasAny([request.auth.uid])
                         && request.auth.uid == request.resource.data.sender;
           allow update, delete: if get(/databases/$(database)/documents/servers/$(serverId)).data.members.hasAny([request.auth.uid])
                                  && request.auth.uid == resource.data.sender;
        }
      }
    }

  }
}
