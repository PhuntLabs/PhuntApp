
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Default deny all
    match /{document=**} {
      allow read, write: if false;
    }

    // Users collection rules
    match /users/{userId} {
      // Anyone can query the users collection to check for usernames during signup
      allow list: if true;
      // Any authenticated user can read any user's profile
      allow read: if request.auth != null;
      // A user can create their own profile document
      allow create: if request.auth.uid == userId;
      // A user can only update their own profile
      allow update: if request.auth.uid == userId;
    }
    
    // Friend Requests collection rules
    match /friendRequests/{requestId} {
      // The sender or receiver of a request can read it
      allow read: if request.auth.uid == resource.data.to || request.auth.uid == resource.data.from.id;
      // A user can only create a request that comes from them
      allow create: if request.auth.uid == request.resource.data.from.id;
      // Only the recipient of the request can update it (accept/decline)
      allow update: if request.auth.uid == resource.data.to;
    }

    // Chats collection rules
    match /chats/{chatId} {
      // A user can read, create, update, or delete a chat if they are a member
      allow read, create, update, delete: if request.auth.uid in resource.data.members;

      // Messages subcollection rules
      match /messages/{messageId} {
        // A user can read or create messages in a chat they are a member of
        allow read, create: if request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.members;
        // A user can only update or delete messages they sent
        allow update, delete: if request.auth.uid == resource.data.sender;
      }
    }

    // Servers collection rules
    match /servers/{serverId} {
      // Any authenticated user can read server info for discovery/join pages
      allow read: if request.auth != null;
      // A user can create a server if they are the owner
      allow create: if request.auth.uid == request.resource.data.ownerId;
      // Server owner can update it, or a user can join (add themselves to members)
      allow update: if request.auth.uid == resource.data.ownerId || 
                      (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['members']) &&
                       request.resource.data.members.size() == resource.data.members.size() + 1 &&
                       request.auth.uid in request.resource.data.members);
      // Only owner can delete
      allow delete: if request.auth.uid == resource.data.ownerId;

      // Channels subcollection rules
      match /channels/{channelId} {
        // Any authenticated user can list/read channels
        allow list, read: if request.auth != null;
        // Only server members can manage channels
        allow create, update, delete: if get(/databases/$(database)/documents/servers/$(serverId)).data.members.hasAny([request.auth.uid]);

        // Channel Messages subcollection rules
        match /messages/{messageId} {
          // Server members can create/read messages
          allow create, read: if get(/databases/$(database)/documents/servers/$(serverId)).data.members.hasAny([request.auth.uid]);
          // Only the sender can update/delete their messages
          allow update, delete: if request.auth.uid == resource.data.sender;
        }
      }
    }
  }
}
