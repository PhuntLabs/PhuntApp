
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    function isAuth() {
      return request.auth != null;
    }
    
    match /users/{userId} {
      allow read: if isAuth();
      allow create: if isAuth() && request.auth.uid == userId;
      allow update: if isAuth() && request.auth.uid == userId;
    }

    match /friendRequests/{requestId} {
      allow read: if isAuth() && request.auth.uid in resource.data.members;
      allow create: if isAuth() && request.auth.uid == request.resource.data.from.id;
      allow update: if isAuth() && 
                      (
                        // The recipient can accept/decline
                        request.auth.uid == resource.data.to ||
                        // The sender can cancel (if we add that feature)
                        request.auth.uid == resource.data.from.id
                      );
    }

    match /chats/{chatId} {
      allow read, delete: if isAuth() && request.auth.uid in resource.data.members;
      allow create: if isAuth() && request.auth.uid in request.resource.data.members;
      allow update: if isAuth() && request.auth.uid in resource.data.members;
      
      match /messages/{messageId} {
        allow read, create: if isAuth() && request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.members;
        allow update, delete: if isAuth() && request.auth.uid == resource.data.sender;
      }
    }
    
    match /servers/{serverId} {
        allow read: if isAuth();

        // Let anyone create a server, as long as they are the owner
        allow create: if isAuth() && request.auth.uid == request.resource.data.ownerId;
        
        allow update: if isAuth() && 
                      (
                        // Owner can update anything
                        request.auth.uid == resource.data.ownerId || 
                        // Any user can join (add themselves to members list)
                        (
                            request.resource.data.diff(resource.data).affectedKeys().hasOnly(['members']) &&
                            request.resource.data.members == resource.data.members.concat([request.auth.uid])
                        )
                      );

        allow delete: if isAuth() && request.auth.uid == resource.data.ownerId;

        match /channels/{channelId} {
            allow read: if isAuth();
            allow create, update, delete: if isAuth() && request.auth.uid == get(/databases/$(database)/documents/servers/$(serverId)).data.ownerId;

            match /messages/{messageId} {
                allow read, create: if isAuth() && request.auth.uid in get(/databases/$(database)/documents/servers/$(serverId)).data.members;
                allow update, delete: if isAuth() && request.auth.uid == resource.data.sender;
            }
        }
    }
  }
}
