rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Default deny all
    match /{document=**} {
      allow read, write: if false;
    }

    // USERS
    // - Anyone can check for a username's existence (list).
    // - Authenticated users can read any profile.
    // - Users can only create or update their own profile.
    match /users/{userId} {
      allow list: if true; // Allows username uniqueness check before signup
      allow read: if request.auth != null;
      allow create, update: if request.auth.uid == userId;
    }

    // FRIEND REQUESTS
    // - Users can read requests sent to or from them.
    // - A user can create a request if they are the sender.
    // - A user can update a request if they are the recipient.
    match /friendRequests/{requestId} {
      allow read: if request.auth.uid == resource.data.to || request.auth.uid == resource.data.from.id;
      allow create: if request.auth.uid == request.resource.data.from.id;
      allow update: if request.auth.uid == resource.data.to;
    }

    // CHATS & MESSAGES
    // - A user can query for their chats.
    // - A user can read/write to a chat if they are a member.
    match /chats/{chatId} {
      allow list: if request.auth != null; // Allows querying for chats
      allow read, create, update, delete: if request.auth.uid in resource.data.members;

      match /messages/{messageId} {
        allow read, create: if request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.members;
        allow update, delete: if request.auth.uid == resource.data.sender;
      }
    }

    // SERVERS & CHANNELS
    match /servers/{serverId} {
      allow read: if request.auth != null;
      allow create: if request.auth.uid == request.resource.data.ownerId;
      allow update: if request.auth.uid == resource.data.ownerId ||
                      (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['members']) &&
                       request.resource.data.members.size() == resource.data.members.size() + 1 &&
                       request.auth.uid in request.resource.data.members);
      allow delete: if request.auth.uid == resource.data.ownerId;

      match /channels/{channelId} {
        allow read, list: if request.auth != null;
        allow create, update, delete: if get(/databases/$(database)/documents/servers/$(serverId)).data.ownerId == request.auth.uid;

        match /messages/{messageId} {
          allow read: if request.auth.uid in get(/databases/$(database)/documents/servers/$(serverId)).data.members;
          allow create: if request.auth.uid in get(/databases/$(database)/documents/servers/$(serverId)).data.members;
          allow update, delete: if request.auth.uid == resource.data.sender;
        }
      }
    }
  }
}