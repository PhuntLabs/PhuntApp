
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Default deny all
    match /{document=**} {
      allow read, write: if false;
    }

    // Users Collection Rules
    match /users/{userId} {
      // Any authenticated user can query for users (to find friends)
      // and read user profiles. This is safe for non-sensitive public profile data.
      allow list, read: if request.auth != null;

      // A user can create their own user document.
      allow create: if request.auth.uid == userId;

      // A user can only update their own profile.
      allow update: if request.auth.uid == userId;
    }
    
    // Friend Requests Collection Rules
    match /friendRequests/{requestId} {
      // A user can only create a friend request that comes from them.
      allow create: if request.auth.uid == request.resource.data.from.id;

      // A user can read a request if they sent it or received it.
      allow read: if request.auth.uid == resource.data.to || request.auth.uid == resource.data.from.id;
      
      // Only the recipient can update the request (accept/decline).
      allow update: if request.auth.uid == resource.data.to;
    }

    // Chats Collection Rules
    match /chats/{chatId} {
      // A user can query for their own chats, and read/write to them.
      allow list, read, update, delete: if request.auth.uid in resource.data.members;

      // A user can create a chat if they are one of the members in the new chat document.
      allow create: if request.auth.uid in request.resource.data.members;

      // Messages Sub-collection Rules
      match /messages/{messageId} {
        // Allow read/create if the user is a member of the parent chat.
        allow read, create: if get(/databases/$(database)/documents/chats/$(chatId)).data.members.hasAny([request.auth.uid]);
        
        // Allow update/delete only if the user is the original sender.
        allow update, delete: if request.auth.uid == resource.data.sender;
      }
    }

    // Servers Collection Rules
    match /servers/{serverId} {
      // Any authenticated user can read public server information.
      allow read: if request.auth != null;
      
      // A user can create a server if they are the owner.
      allow create: if request.auth.uid == request.resource.data.ownerId;

      // Allow server owners to update their server.
      // Also, allow any authenticated user to join a server (add themselves to the members list).
      allow update: if request.auth.uid == resource.data.ownerId || 
                      (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['members']) &&
                       request.resource.data.members.size() == resource.data.members.size() + 1 &&
                       request.auth.uid in request.resource.data.members);
      
      // Only the owner can delete a server.
      allow delete: if request.auth.uid == resource.data.ownerId;

      // Channels Sub-collection Rules
      match /channels/{channelId} {
        // Any authenticated user can list/read channels.
        allow list, read: if request.auth != null;
        
        // Only members of the server can manage channels.
        allow create, update, delete: if get(/databases/$(database)/documents/servers/$(serverId)).data.members.hasAny([request.auth.uid]);

        // Channel Messages Sub-collection Rules
        match /messages/{messageId} {
          // A user can read messages if they are a member of the server.
          allow read: if get(/databases/$(database)/documents/servers/$(serverId)).data.members.hasAny([request.auth.uid]);
          
          // A user can create a message if they are a member of the server.
          allow create: if request.auth.uid in get(/databases/$(database)/documents/servers/$(serverId)).data.members;
          
          // A user can update/delete a message only if they are the sender.
          allow update, delete: if request.auth.uid == resource.data.sender;
        }
      }
    }
  }
}
