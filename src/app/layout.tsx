import type { Metadata } from 'next';
import './globals.css';
import { Toaster } from '@/components/ui/toaster';
import { AuthProvider } from '@/hooks/use-auth';
import { Inter, Roboto, Lato, Source_Code_Pro } from 'next/font/google';

const inter = Inter({ subsets: ['latin'], variable: '--font-inter' });
const roboto = Roboto({ subsets: ['latin'], weight: ['400', '500', '700'], variable: '--font-roboto' });
const lato = Lato({ subsets: ['latin'], weight: ['400', '700'], variable: '--font-lato' });
const sourceCodePro = Source_Code_Pro({ subsets: ['latin'], variable: '--font-source-code-pro' });

export const metadata: Metadata = {
  title: 'Firebase Studio App',
  description: 'Generated by Firebase Studio',
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en" suppressHydrationWarning>
      <head>
         <script
          dangerouslySetInnerHTML={{
            __html: `
              (function() {
                const theme = localStorage.getItem('app-theme') || 'dark';
                const font = localStorage.getItem('app-theme-font') || 'inter';
                const customColor = localStorage.getItem('app-theme-custom-color');

                document.documentElement.className = theme;
                document.body.classList.add('font-' + font);

                if (theme === 'custom' && customColor) {
                  const hexToHsl = (hex) => {
                      hex = hex.replace('#', '');
                      const r = parseInt(hex.substring(0, 2), 16) / 255;
                      const g = parseInt(hex.substring(2, 4), 16) / 255;
                      const b = parseInt(hex.substring(4, 6), 16) / 255;

                      const max = Math.max(r, g, b);
                      const min = Math.min(r, g, b);
                      let h = 0, s = 0, l = (max + min) / 2;

                      if (max !== min) {
                          const d = max - min;
                          s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
                          switch (max) {
                              case r: h = (g - b) / d + (g < b ? 6 : 0); break;
                              case g: h = (b - r) / d + 2; break;
                              case b: h = (r - g) / d + 4; break;
                          }
                          h /= 6;
                      }
                      return (h * 360).toFixed(1) + ' ' + (s * 100).toFixed(1) + '% ' + (l * 100).toFixed(1) + '%';
                  };
                  document.documentElement.style.setProperty('--primary', hexToHsl(customColor));
                }
              })();
            `,
          }}
        />
      </head>
      <body className={`${inter.variable} ${roboto.variable} ${lato.variable} ${sourceCodePro.variable} antialiased`}>
        <AuthProvider>
          {children}
          <Toaster />
        </AuthProvider>
      </body>
    </html>
  );
}
