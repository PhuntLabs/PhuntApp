rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    match /users/{userId} {
      allow list, read: if true;
      allow create: if request.auth.uid == request.resource.data.uid;
      allow update: if request.auth.uid == userId;
    }
    
    match /friendRequests/{requestId} {
      // Allow creation if the user is sending it from their own account.
      allow create: if request.auth.uid == request.resource.data.from.id;
      // Allow reading by both the sender and receiver.
      allow read: if request.auth.uid == resource.data.to || request.auth.uid == resource.data.from.id;
      // Only the recipient can update the status (accept/decline).
      allow update: if request.auth.uid == resource.data.to;
    }

    match /chats/{chatId} {
      // Allow read/update/delete if the user is a member of the chat.
      allow read, update, delete: if request.auth.uid in resource.data.members;
      // Allow creation if the user is including themselves in the members list.
      allow create: if request.auth.uid in request.resource.data.members;

      match /messages/{messageId} {
        allow read, create: if request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.members;
        allow update, delete: if request.auth.uid == resource.data.sender;
      }
    }

    match /servers/{serverId} {
      allow read: if request.auth != null;
      allow create: if request.auth.uid == request.resource.data.ownerId;
      allow update: if request.auth.uid == resource.data.ownerId || 
                      (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['members']) &&
                       request.resource.data.members.size() == resource.data.members.size() + 1 &&
                       request.auth.uid in request.resource.data.members);
      allow delete: if request.auth.uid == resource.data.ownerId;

      match /channels/{channelId} {
        allow list, read: if request.auth != null;
        allow create, update, delete: if get(/databases/$(database)/documents/servers/$(serverId)).data.members.hasAny([request.auth.uid]);

        match /messages/{messageId} {
          allow create: if request.auth.uid in get(/databases/$(database)/documents/servers/$(serverId)).data.members;
          allow read: if get(/databases/$(database)/documents/servers/$(serverId)).data.members.hasAny([request.auth.uid]);
          allow update, delete: if request.auth.uid == resource.data.sender;
        }
      }
    }
  }
}
