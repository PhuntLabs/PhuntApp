rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    match /users/{userId} {
      allow read;
      allow create: if request.auth != null;
      allow update: if request.auth.uid == userId;
    }

    match /chats/{chatId} {
      allow read, delete: if request.auth.uid in resource.data.members;
      
      match /messages/{messageId} {
        allow read, create: if request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.members;
        allow update, delete: if request.auth.uid == resource.data.sender;
      }
    }

    match /friendRequests/{requestId} {
      allow read, create: if request.auth != null;
      allow update: if request.auth.uid == resource.data.to || request.auth.uid == resource.data.from.id;
    }

    match /servers/{serverId} {
      // Allow read if user is a member OR if the server is public
      allow read: if resource.data.isPublic == true || request.auth.uid in resource.data.members;
      
      // Allow create if user is authenticated
      allow create: if request.auth != null;
      
      // Allow update if user is the owner, OR if they are only adding themselves to the members list (joining)
      allow update: if request.auth.uid == resource.data.ownerId || 
                     (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['members']) &&
                      request.resource.data.members.size() == resource.data.members.size() + 1 &&
                      request.auth.uid in request.resource.data.members);

      allow delete: if request.auth.uid == resource.data.ownerId;
      
      match /channels/{channelId} {
        allow read: if request.auth.uid in get(/databases/$(database)/documents/servers/$(serverId)).data.members;
        allow create, update, delete: if request.auth.uid == get(/databases/$(database)/documents/servers/$(serverId)).data.ownerId;

        match /messages/{messageId} {
          allow read, create: if request.auth.uid in get(/databases/$(database)/documents/servers/$(serverId)).data.members;
          allow update, delete: if request.auth.uid == resource.data.sender;
        }
      }
    }
  }
}
